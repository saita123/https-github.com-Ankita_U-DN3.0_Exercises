Exercise 1: Control Structures
Scenario 1: The bank wants to apply a discount to loan interest rates for customers above 60 years old.
Question: Write a PL/SQL block that loops through all customers, checks their age, and if they are above 60, apply a 1% discount to their current loan interest rates.
BEGIN
    FOR rec IN (SELECT * FROM Customers) LOOP
        IF (SYSDATE - rec.DOB)> 60 THEN
            UPDATE Loans
            SET InterestRate = InterestRate - 1
            WHERE CustomerID = rec.CustomerID;
        END IF;
    END LOOP;
END;
/












Scenario 2: A customer can be promoted to VIP status based on their balance. 
 Question: Write a PL/SQL block that iterates through all customers and sets a flag IsVIP to TRUE for those with a balance over $10,000.
ALTER TABLE Customers
ADD IsVIP NUMBER(1) DEFAULT 0;
BEGIN    
    FOR rec IN (SELECT * FROM Customers) LOOP
        IF rec.Balance > 10000 THEN
            UPDATE Customers
            SET IsVIP = 1
            WHERE CustomerID = rec.CustomerID;
        END IF;
    END LOOP;
END;
/











Scenario 3: The bank wants to send reminders to customers whose loans are due within the next 30 days. o Question: Write a PL/SQL block that fetches all loans due in the next 30 days and prints a reminder message for each customer.
BEGIN
    FOR rec IN (SELECT * FROM Loans WHERE EndDate < SYSDATE + 30) LOOP
        DBMS_OUTPUT.PUT_LINE('This is to remind you that Loan ' || rec.LoanID || ' is due within 30 days.');
    END LOOP;
END;
/
















Exercise 2: Error Handling
Scenario 1:
Handle exceptions during fund transfers between accounts. o Question: Write a stored procedure SafeTransferFunds that transfers funds between two accounts. Ensure that if any error occurs (e.g., insufficient funds), an appropriate error message is logged and the transaction is rolled back.
CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_fromAccountID IN Accounts.AccountID%TYPE,
    p_toAccountID IN Accounts.AccountID%TYPE,
    p_amount IN NUMBER
) IS
BEGIN
    UPDATE Accounts
    SET Balance = Balance - p_amount
    WHERE AccountID = p_fromAccountID AND Balance >= p_amount;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds');
    END IF;
    UPDATE Accounts
    SET Balance = Balance + p_amount
    WHERE AccountID = p_toAccountID;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
          ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
             RAISE;
END;
/
BEGIN
    SafeTransferFunds(1, 2, 2000);
END;
/



















Scenario 2: Manage errors when updating employee salaries. 
 Question: Write a stored procedure UpdateSalary that increases the salary of an employee by a given percentage. If the employee ID does not exist, handle the exception and log an error message.
CREATE OR REPLACE PROCEDURE UpdateSalary(
    p_employeeID IN Employees.EmployeeID%TYPE,
    p_percentage IN NUMBER
) IS
BEGIN
    UPDATE Employees
    SET Salary = Salary + (Salary * p_percentage / 100)
    WHERE EmployeeID = p_employeeID;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Employee ID does not exist');
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO ErrorLog (ErrorMessage) VALUES (SQLERRM);
        RAISE;
END;


Scenario 2: Manage errors when updating employee salaries. o Question: Write a stored procedure UpdateSalary that increases the salary of an employee by a given percentage. If the employee ID does not exist, handle the exception and log an error message.

CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_customerID IN Customers.CustomerID%TYPE,
    p_name IN Customers.Name%TYPE,
    p_dob IN Customers.DOB%TYPE,
    p_balance IN Customers.Balance%TYPE
) IS
BEGIN
    INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
    VALUES (p_customerID, p_name, p_dob, p_balance, SYSDATE);

    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        INSERT INTO ErrorLog (ErrorMessage) VALUES ('Customer with ID ' || p_customerID || ' already exists.');
        RAISE;
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO ErrorLog (ErrorMessage) VALUES (SQLERRM);
        RAISE;
END;


Scenario 3: Ensure data integrity when adding a new customer. o Question: Write a stored procedure AddNewCustomer that inserts a new customer into the Customers table. If a customer with the same ID already exists, handle the exception by logging an error and preventing the insertion.


CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
BEGIN
    FOR rec IN (SELECT * FROM Accounts WHERE AccountType = 'Savings') LOOP
        UPDATE Accounts
        SET Balance = Balance + (Balance * 0.01)
        WHERE AccountID = rec.AccountID;
    END LOOP;
    COMMIT;
END;












Exercise 3: Stored Procedures
Scenario 1: The bank needs to process monthly interest for all savings accounts. o Question: Write a stored procedure ProcessMonthlyInterest that calculates and updates the balance of all savings accounts by applying an interest rate of 1% to the current balance.

CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus(
    p_department IN Employees.Department%TYPE,
    p_bonusPercentage IN NUMBER
) IS
BEGIN
    UPDATE Employees
    SET Salary = Salary + (Salary * p_bonusPercentage / 100)
    WHERE Department = p_department;
    COMMIT;
END;











Scenario 2: The bank needs to compute the monthly installment for a loan. o Question: Write a function CalculateMonthlyInstallment that takes the loan amount, interest rate, and loan duration in years as input and returns the monthly installment amount.

CREATE OR REPLACE PROCEDURE TransferFunds(
    p_fromAccountID IN Accounts.AccountID%TYPE,
    p_toAccountID IN Accounts.AccountID%TYPE,
    p_amount IN NUMBER
) IS
BEGIN
    UPDATE Accounts
    SET Balance = Balance - p_amount
    WHERE AccountID = p_fromAccountID AND Balance >= p_amount;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds');
    END IF;
    UPDATE Accounts
    SET Balance = Balance + p_amount
    WHERE AccountID = p_toAccountID;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO ErrorLog (ErrorMessage) VALUES (SQLERRM);
        RAISE;
END;
Scenario 3: Customers should be able to transfer funds between their accounts. 
Question: Write a stored procedure TransferFunds that transfers a specified amount from one account to another, checking that the source account has sufficient balance before making the transfer.



CREATE OR REPLACE FUNCTION CalculateAge(p_dob IN DATE) RETURN NUMBER IS
    v_age NUMBER;
BEGIN
    SELECT FLOOR(MONTHS_BETWEEN(SYSDATE, p_dob) / 12) INTO v_age FROM DUAL;
    RETURN v_age;
END;













Exercise 5: Triggers
Scenario 1: Automatically update the last modified date when a customer's record is updated.
Question: Write a trigger UpdateCustomerLastModified that updates the LastModified column of the Customers table to the current date whenever a customer's record is updated.

CREATE OR REPLACE FUNCTION CalculateMonthlyInstallment(
    p_loanAmount IN NUMBER,
    p_interestRate IN NUMBER,
    p_durationInYears IN NUMBER
) RETURN NUMBER IS
    v_monthlyInstallment NUMBER;
BEGIN
    v_monthlyInstallment := (p_loanAmount * (1 + p_interestRate / 100)) / (p_durationInYears * 12);
    RETURN v_monthlyInstallment;
END;










Scenario 2: Maintain an audit log for all transactions. 
Question: Write a trigger LogTransaction that inserts a record into an AuditLog table whenever a transaction is inserted into the Transactions table.

CREATE OR REPLACE FUNCTION HasSufficientBalance(
    p_accountID IN Accounts.AccountID%TYPE,
    p_amount IN NUMBER
) RETURN BOOLEAN IS
    v_balance NUMBER;
BEGIN
    SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_accountID;
    RETURN v_balance >= p_amount;
END;













Scenario 3: Enforce business rules on deposits and withdrawals. 
Question: Write a trigger CheckTransactionRules that ensures withdrawals do not exceed the balance and deposits are positive before inserting a record into the Transactions table.


CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;















Scenario 1: Generate monthly statements for all customers. 
Question: Write a PL/SQL block using an explicit cursor GenerateMonthlyStatements that retrieves all transactions for the current month and prints a statement for each customer.



CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (:NEW.TransactionID, :NEW.AccountID, :NEW.TransactionDate, :NEW.Amount, :NEW.TransactionType);
END;












Scenario 2: Apply annual fee to all accounts. 
Question: Write a PL/SQL block using an explicit cursor ApplyAnnualFee that deducts an annual maintenance fee from the balance of all accounts.




CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
BEGIN
    IF :NEW.TransactionType = 'Withdrawal' THEN
        IF :NEW.Amount > (SELECT Balance FROM Accounts WHERE AccountID = :NEW.AccountID) THEN
            RAISE_APPLICATION_ERROR(-20001, 'Withdrawal amount exceeds balance');
        END IF;
    ELSIF :NEW.TransactionType = 'Deposit' THEN
        IF :NEW.Amount <= 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be positive');
        END IF;
    END IF;
END;




Scenario 3: Update the interest rate for all loans based on a new policy. 
 Question: Write a PL/SQL block using an explicit cursor UpdateLoanInterestRates that fetches all loans and updates their interest rates based on the new policy.






DECLARE
    CURSOR cur_transactions IS
        SELECT * FROM Transactions WHERE TransactionDate BETWEEN TRUNC(SYSDATE, 'MM') AND LAST_DAY(SYSDATE);
BEGIN
    FOR rec IN cur_transactions LOOP
        DBMS_OUTPUT.PUT_LINE('Customer ID: ' || rec.CustomerID || ', Transaction: ' || rec.TransactionID);
    END LOOP;
END;
















DECLARE
    CURSOR cur_accounts IS
        SELECT * FROM Accounts;
BEGIN
    FOR rec IN cur_accounts LOOP
        UPDATE Accounts
        SET Balance = Balance - 50 -- Assuming $50 as the annual fee
        WHERE AccountID = rec.AccountID;
    END LOOP;
    COMMIT;
END;














DECLARE
    CURSOR cur_loans IS
        SELECT * FROM Loans;
BEGIN
    FOR rec IN cur_loans LOOP
        UPDATE Loans
        SET InterestRate = InterestRate * 1.02 -- Assuming a 2% increase in interest rate
        WHERE LoanID = rec.LoanID;
    END LOOP;
    COMMIT;
END;






Exercise 7: Packages

Scenario 1: Group all customer-related procedures and functions into a package. 
Question: Create a package CustomerManagement with procedures for adding a new customer, updating customer details, and a function to get customer balance.

CREATE OR REPLACE PACKAGE CustomerManagement AS
    PROCEDURE AddCustomer(p_customerID IN Customers.CustomerID%TYPE, p_name IN Customers.Name%TYPE, p_dob IN Customers.DOB%TYPE, p_balance IN Customers.Balance%TYPE);
    PROCEDURE UpdateCustomer(p_customerID IN Customers.CustomerID%TYPE, p_name IN Customers.Name%TYPE, p_balance IN Customers.Balance%TYPE);
    FUNCTION GetCustomerBalance(p_customerID IN Customers.CustomerID%TYPE) RETURN NUMBER;
END CustomerManagement;
/











Scenario 2: Create a package to manage employee data. 
Question: Write a package EmployeeManagement with procedures to hire new employees, update employee details, and a function to calculate annual salary.
CREATE OR REPLACE PACKAGE BODY CustomerManagement AS
    PROCEDURE AddCustomer(p_customerID IN Customers.CustomerID%TYPE, p_name IN Customers.Name%TYPE, p_dob IN Customers.DOB%TYPE, p_balance IN Customers.Balance%TYPE) IS
    BEGIN
        INSERT INTO Customers (CustomerID, Name, DOB, Balance, Last

